// This is your Prisma schema file for the shared database
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant model to store information about each tenant
model Tenant {
  id           String   @id @default(cuid())
  name         String
  email        String?
  subdomain    String   @unique
  description  String?
  logo         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  theme        Json? // Stores tenant-specific theme settings
  databaseName String   @unique // Name of the tenant's database
  oneUseToken  String?

  themeSettings    ThemeSettings?
  users            User[]
  contents         Content[]
  pages            Page[]
  subscriptionType SubscriptionType @default(MANUAL)
  subscription     Subscription?
  
  // Real Estate Management Relations
  persons           Person[]
  properties        Property[]
  contracts         Contract[]
  contractTypes     ContractType[]
  indexes           Index[]
  currencies        Currency[]
  priceCalculations PriceCalculation[]
  guarantees        Guarantee[]
  paymentMethods    PaymentMethodDetails[]
  paymentHistory    PaymentHistory[]
}

// User model for tenant-specific users
model User {
  id              String   @id @default(cuid())
  email           String
  password        String
  name            String
  avatar          String?
  tenantId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, tenantId])
  tenant  Tenant    @relation(fields: [tenantId], references: [id])
  role    UserRole
  content Content[]
  pages   Page[]
}

// Content model for tenant-specific content
model Content {
  id              String   @id @default(cuid())
  title           String
  body            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  pageId          String
  authorId        String
  tenantId String

  @@unique([title, tenantId, pageId])
  page   Page   @relation(fields: [pageId], references: [id])
  author User   @relation(fields: [authorId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

// Page model for tenant-specific pages
model Page {
  id              String  @id @default(cuid())
  title           String
  slug            String
  isActive        Boolean @default(true)
  isFeatured      Boolean @default(false)
  isHome          Boolean @default(false)
  authorId        String
  tenantId String

  @@unique([slug, tenantId])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Content[]
  author    User      @relation(fields: [authorId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
}

// Enum for user roles
enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Super Admin model for system-wide administration
model SuperAdmin {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Payment {
  id             String    @id @default(cuid())
  amount         Float
  externalId     String?   @unique
  dueDate        DateTime
  paidAt         DateTime?
  reason         String?
  proofOfPayment String? // URL to the uploaded proof of payment file
  subscriptionId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  status        PaymentStatus
  paymentMethod PaymentMethod
  subscription  Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Float
  features      Json? // Stores plan features as PlanFeatures type
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  MANUAL
  AUTOMATED
}

enum SubscriptionType {
  MANUAL
  AUTOMATED
}

model Subscription {
  id              String    @id @default(cuid())
  externalId      String?   @unique
  tenantId String    @unique
  planId          String
  nextPaymentAt   DateTime?
  graceStartedAt  DateTime?
  gracePeriodDays Int       @default(15)
  billingCycle    Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  status        SubscriptionStatus @default(ACTIVE)
  paymentMethod PaymentMethod
  tenant        Tenant             @relation(fields: [tenantId], references: [id])
  plan          Plan               @relation(fields: [planId], references: [id])
  payments      Payment[]
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  PAUSED
  CANCELLED
  EXPIRED
}

// Theme settings for tenant-specific color schemes
model ThemeSettings {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  tenantId String   @unique

  // Primary colors
  primary100 String
  primary200 String
  primary300 String
  primary400 String
  primary500 String
  primary600 String
  primary700 String
  primary800 String
  primary900 String

  // Secondary colors
  secondary100 String
  secondary200 String
  secondary300 String
  secondary400 String
  secondary500 String
  secondary600 String
  secondary700 String
  secondary800 String
  secondary900 String

  // Tertiary colors
  tertiary100 String
  tertiary200 String
  tertiary300 String
  tertiary400 String
  tertiary500 String
  tertiary600 String
  tertiary700 String
  tertiary800 String
  tertiary900 String

  // Neutral colors
  neutral100 String
  neutral200 String
  neutral300 String
  neutral400 String
  neutral500 String
  neutral600 String
  neutral700 String
  neutral800 String
  neutral900 String

  // Background colors
  background100 String
  background200 String
  background300 String
  background400 String

  // Status colors
  success100 String
  success200 String
  success300 String
  success400 String
  success500 String
  success600 String
  success700 String
  success800 String
  success900 String

  warning100 String
  warning200 String
  warning300 String
  warning400 String
  warning500 String
  warning600 String
  warning700 String
  warning800 String
  warning900 String

  error100 String
  error200 String
  error300 String
  error400 String
  error500 String
  error600 String
  error700 String
  error800 String
  error900 String
}

// Real Estate Management Models
model Person {
  id                String   @id @default(cuid())
  tenantId          String
  documentType      String
  document          String
  firstName         String
  lastName          String
  address           String
  phoneNumber       String
  email             String
  dateOfBirth       DateTime
  taxId             String?  // CUIT/CUIL
  emergencyContact  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  ownedProperties   Property[] @relation("PropertyOwner")
  occupiedProperties Property[] @relation("PropertyOccupant")
  appliedProperties Property[] @relation("PropertyApplicant")
  guarantees        Guarantee[]
  paymentHistory    PaymentHistory[]
}

model Property {
  id              String   @id @default(cuid())
  tenantId        String
  address         String
  floorUnit       String?
  propertyType    String
  isRented        Boolean  @default(false)
  size            Float?
  numberOfRooms   Int?
  services        String?
  description     String?
  rentalPrice     Float
  availableFrom   DateTime?
  availableTo     DateTime?
  constructionYear Int?
  propertyId      String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([address,floorUnit])
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  owner           Person   @relation("PropertyOwner", fields: [ownerId], references: [id])
  ownerId         String
  occupant        Person?  @relation("PropertyOccupant", fields: [occupantId], references: [id])
  occupantId      String?
  applicant       Person?  @relation("PropertyApplicant", fields: [applicantId], references: [id])
  applicantId     String?
  contracts       Contract[]
  photos          PropertyPhoto[]
}

model PropertyPhoto {
  id          String   @id @default(cuid())
  propertyId  String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property    Property @relation(fields: [propertyId], references: [id])
}

model Contract {
  id                  String   @id @default(cuid())
  tenantId            String
  startDate           DateTime
  endDate             DateTime
  duration            Int?     // in months
  latePaymentPenalty  Float?
  renewalConditions   String?
  earlyTermination    String?
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  status              ContractStatus @default(PENDING)
  tenant              Tenant         @relation(fields: [tenantId], references: [id])
  property            Property       @relation(fields: [propertyId], references: [id])
  propertyId          String
  contractType        ContractType   @relation(fields: [contractTypeId], references: [id])
  contractTypeId      String
  priceCalculation    PriceCalculation @relation(fields: [priceCalculationId], references: [id])
  priceCalculationId  String
  paymentMethod       PaymentMethodDetails @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId     String
  guarantees          Guarantee[]
  paymentHistory      PaymentHistory[]
}

model ContractType {
  id            String   @id @default(cuid())
  tenantId      String
  name          String
  description   String?
  file          String?
  jurisdiction  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  contracts     Contract[]
}

enum ContractStatus {
  PENDING
  ACTIVE
  TERMINATED
  EXPIRED
  CANCELLED
}

model Index {
  id              String   @id @default(cuid())
  tenantId        String
  name            String
  currentValue    Float
  updateFrequency String
  source          String
  isActive        Boolean  @default(true)
  historyValues   Json     // Array of {value: Float, date: DateTime}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  priceCalculations PriceCalculation[]
}

model Currency {
  id              String   @id @default(cuid())
  tenantId        String
  type            String
  name            String
  description     String?
  valueInPesos    Float
  historyValues   Json     // Array of {value: Float, date: DateTime}
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  priceCalculations PriceCalculation[]
  guarantees        Guarantee[]
}

model PriceCalculation {
  id                String   @id @default(cuid())
  tenantId          String
  updatePeriod      Int      // in months
  initialPrice      Float
  currentPrice      Float
  historyValues     Json     // Array of {value: Float, date: DateTime}
  fixedAmount       Float?
  fixedPercentage   Float?
  currencyLock      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  index             Index?   @relation(fields: [indexId], references: [id])
  indexId           String?
  currency          Currency? @relation(fields: [currencyId], references: [id])
  currencyId        String?
  contracts         Contract[]
}

model Guarantee {
  id                String   @id @default(cuid())
  tenantId          String
  type              String
  amount            Float
  paymentDate       DateTime?
  guarantorRelation String?
  expirationDate    DateTime?
  supportingDocs    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  status            PaymentStatus @default(PENDING)
  tenant            Tenant        @relation(fields: [tenantId], references: [id])
  person            Person        @relation(fields: [personId], references: [id])
  personId          String
  currency          Currency      @relation(fields: [currencyId], references: [id])
  currencyId        String
  paymentMethod     PaymentMethodDetails @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   String
  contract          Contract?     @relation(fields: [contractId], references: [id])
  contractId        String?
  paymentHistory    PaymentHistory[]
}

model PaymentHistory {
  id              String   @id @default(cuid())
  tenantId        String
  amount          Float
  paymentDate     DateTime
  proofOfPayment  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  status          PaymentStatus
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  person          Person   @relation(fields: [personId], references: [id])
  personId        String
  contract        Contract? @relation(fields: [contractId], references: [id])
  contractId      String?
  guarantee       Guarantee? @relation(fields: [guaranteeId], references: [id])
  guaranteeId     String?
  paymentMethod   PaymentMethodDetails @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model PaymentMethodDetails {
  id              String   @id @default(cuid())
  tenantId        String
  type            String
  accountNumber   String?
  accountHolder   String?
  bankName        String?
  branchCode      String?
  swiftCode       String?
  iban            String?
  bic             String?
  bankAddress     String?
  bankPhone       String?
  bankEmail       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  contracts       Contract[]
  guarantees      Guarantee[]
  paymentHistory  PaymentHistory[]
}
