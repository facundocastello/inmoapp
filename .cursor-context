# Multi-Tenant Project Context

## Core Architecture
- Next.js application with route groups:
  - (super-admin): Tenant and shared DB management
  - (admin): Tenant-specific administration
  - (public): Public tenant content access
- Subdomain-based tenant routing
  - Tenant panel: {tenant}.domain.com/admin
  - Public website: {tenant}.domain.com
- File Storage: Digital Ocean Spaces
- State Management: React Context + Server Actions
- Form Handling: React Hook Form + Zod validation

## Database Design
- PostgreSQL with Prisma
- Two database types:
  1. sharedDB: Tenant info and super-admin data (implemented)
  2. tenantDB: Individual tenant databases (implemented)
- Each tenant gets their own isolated database
- Database Configuration:
  - Environment variables for connection settings (DB_HOST, DB_USER, DB_PASSWORD)
  - Separate Prisma schema files for shared and tenant databases
  - Using Prisma db push for rapid development schema changes
  - Seeding strategy for both shared and tenant databases
  - Scripts for database management operations in package.json

## Development Guidelines
1. Code Style:
   - IMPORTANT: NO inline styles in className attributes. NO INLINE CLASSNAMES. use the styles object instead.
   - IMPORTANT: All styles MUST be defined in a single-level object at the bottom of each file
   - Example structure:
     ```typescript
     // Component definition here
     
     const styles = {
       container: "flex items-center",
       title: "text-lg font-bold",
       // other style keys
     }
     ```
   - When using cva for variants, move it into the styles object like:
     ```typescript
     const styles = {
       variants: cva(
         // base styles
         {
           variants: {
             // variant definitions
           }
         }
       ),
       // other style keys
     }
     ```
   - Use CSS variables for tenant-specific theming
   - Follow color system structure for consistency
   - Use TypeScript strict mode
   - Prefer named exports over default exports
   - Use barrel exports (index.ts) for cleaner imports

2. Architecture Patterns:
   - Server Actions preferred over API routes
   - Modular component design
   - Route groups for access control
   - Package manager: Yarn
   - Tenant context management through React Context
   - Component Wrapping Strategy:
     - Always wrap Next.js components in custom components
     - Wrap common HTML elements in reusable components
     - Examples: Image, Link, Button, Input, Label, PageContainer
     - Only use basic HTML elements (div, span) when no reusable component exists
     - Keep components focused and single-responsibility

3. Image Handling:
   - Always use Next.js Image component (wrapped in custom component)
   - Digital Ocean Spaces for file storage
   - Optimized image loading and delivery
   - Don't use the vercel Image optimization.
   - Implement proper image sizing and formats
   - Use blur placeholder for better UX
   - Implement proper error handling and fallbacks

4. Authentication Rules:
   - Super-Admin: sharedDB access with full tenant management
   - Admin: tenantDB access
   - Public: tenantDB access
   - Implement proper session management
   - Use secure HTTP-only cookies
   - Implement rate limiting
   - Add CSRF protection

5. Error Handling:
   - Use custom error boundaries
   - Implement proper error logging
   - Show user-friendly error messages
   - Handle network errors gracefully
   - Implement retry mechanisms for failed operations

6. Performance Guidelines:
   - Implement proper code splitting
   - Use React Suspense for loading states
   - Optimize bundle size
   - Implement proper caching strategies
   - Use proper image optimization
   - Implement proper lazy loading

7. Testing Guidelines:
   - Write unit tests for utilities
   - Write component tests for UI components
   - Write integration tests for critical flows
   - Use React Testing Library
   - Implement E2E tests for critical paths
   - Use MSW for API mocking

## UI Standards
1. Color System:
   - Use CSS variables with fallbacks
   - Follow color scale structure (100-900)
   - Tenant-specific customization
   - Default presets for new tenants

2. Component Rules:
   - Modular and reusable
   - Consistent spacing and sizing
   - Responsive by default
   - Accessible design patterns

## Project Structure
- /prisma: Database schemas and migrations
  - schema.prisma: Shared database schema
  - tenant-schema.prisma: Tenant database schema
  - /seeders: Database seed scripts
    - shared-seed.ts: Seed data for shared database
    - tenant-seed.ts: Seed data for tenant database
- /scripts: Utility scripts
  - setup-db.sh: Database setup script
  - seed-db.sh: Database seeding script
- /src/app: Next.js application routes
- /src/components: Reusable UI components
  - /ui: Base UI components (Button, Input, etc.)
  - /layout: Layout components
  - /shared: Shared components across features
  - /section/{section}: Section components. e.g. /section/admin/dashboard
  - /forms: Form-related components
  - /feedback: Toast, Modal, Alert components
- /src/lib: Utility functions and shared logic
  - /db: Database utilities and management functions
  - /hooks: Custom React hooks (see useTheme, useTenantTheme)
  - /utils: Helper functions
  - /constants: Application constants
  - /types: TypeScript types
- /src/actions: Server actions
- /src/services: External service integrations
  - /storage: Digital Ocean integration
  - /email: Email service
  - /analytics: Analytics service
- /src/config: Configuration files
- /public: Static assets
- /src/styles: Global styles and theme configuration
- /src/theme: Color presets and theme utilities
- /src/tests: Test utilities and setup
- /src/middleware: Next.js middleware
- /src/providers: React context providers

## Database Operations
- Package.json Scripts:
  - db:push: Push shared database schema changes
  - db:push:tenant: Push tenant database schema changes
  - db:seed: Run shared database seeder
  - db:seed:tenant: Run tenant database seeder
  - db:reset: Reset and reseed shared database
  - db:reset:tenant: Reset and reseed tenant database
  - db:setup: Set up both databases from scratch
  - studio: Open Prisma Studio for shared database
  - tenant-studio: Open Prisma Studio for tenant database

- Environment Variables:
  - SHARED_DATABASE_URL: Shared database connection string
  - TENANT_DATABASE_URL: Tenant database connection string
  - DB_HOST: Database host address
